scalar Json

type Mutation {
    # Exchanges a JWT for a session cookie.
    # This will load the deposited private key that was associated
    # with the subject ("sub"-claim) of the token and make it available
    # trough a session.
    # This mutation sets a Cookie header which will be read by all subsequent
    # mutation- and query-calls.
    # When a User exchanges a token for the first time, a new PPK-pair will be generated
    # and associated with the "User" object in the database.
    exchangeToken(jwt:String!) : ExchangeTokenResponse!

    # Creates a new entry. If the public key is ommitted, the session owner
    # will be the owner of the entry.
    createEntry(publicKey:String entryContent:Json!) : CreateEntryResponse!

    # Gets the entry by its hash and lists it in the own index file
    # if the index owner is also the entry owner.
    importEntry(entryHash:String! name:String! overwrite:Boolean) : ImportEntryResponse!

    # Removes an entry from the index.
    removeEntry(name:String!) : RemoveEntryResponse!
}

type Query {
    indexEntry: Entry
    findEntryByHash(hash:String!): Entry
    findEntryByHashCleartext(hash:String!): Entry
    version : Version
}

type Entry {
    creatorFingerPrint: String!
    ownerFingerPrint: String!
    entryHash: String!
    content: Json!
}

interface ActionResponse {
    success: Boolean!
    errorMessage: String
}

type ExchangeTokenResponse implements ActionResponse {
    success: Boolean!
    errorMessage: String
}

type CreateEntryResponse implements ActionResponse {
    success: Boolean!
    errorMessage: String
    entryHash: String
}

type RemoveEntryResponse implements ActionResponse {
    success: Boolean!
    errorMessage: String
    entryHash: String
    name: String
}

type ImportEntryResponse implements ActionResponse {
    success: Boolean!
    errorMessage: String
    entryHash: String
    name: String
}

type Version {
    major: Int!
    minor: Int!
    revision: Int!
}